
  USING MEGALZ C DEPACKER IN YOUR PROGRAMS


 I. Where is it.

 The   depacker  itself  is  in  files  "MegaLZ_depacker.c"  and
"MegaLZ_depacker.h". Some additional supporting functions can be
found in "MegaLZ_depack.c" and "MegaLZ_depack.h".


 II. How to use it.

 The  depacker  was  written  with  universality  in mind, so it
doesn't  work  directly  with  memory  array  of packed file and
doesn't  write  depacked stream directly to memory.  Instead, it
uses  external  function get_byte() to get next byte from packed
file,  it has internal circular buffer where it depacks data and
calls put_buffer() function to store into output stream parts of
internal circular buffer.
 Both  functions are defined in "MegaLZ_depack.h" file and their
bodies are in "MegaLZ_depack.c".
 For  adjusting  depacker  to your custom needs, take completely
files  "MegaLZ_depacker.*".  Then rewrite functions put_buffer()
and get_byte() for your needs.
 put_buffer()  receives  position in circular buffer and size of
bytes  it should copy to the external stream.  It returns either
1  in  case  of success or 0 otherwise.  Mind that this function
should account for wrapping of data to be written.
 get_byte() function returns either next byte from input stream,
expanded to ULONG or 0xFFFFFFFF if the stream is empty.
 Depacker   returns   variety   of   exit   codes   defined   in
"MegaLZ_depacker.h", most of them indicate errors.


 III. Additional adjusting.

 If  you  do  not  need  precise error tracking in depacker (for
example, you use it to depack from ROM), undefine 'ERRORS' label
defined in "MegaLZ_depacker.c".
 Internal circular buffer is defined in "MegaLZ_depacker.c", its
size  defined  in  "MegaLZ_depacker.h".   The size should be the
power  of 2, but not less than 8192 bytes (because maximum match
displacement  is  4352  bytes).   The  mask should be size-1 for
correct wrapping inside circular buffer (done by ANDing).
